dir.create("raw_data")
dir.create("clean_data")
dir.create("scripts")
dir.create("results")
data <- read.csv(file.choose())
View(data)
str(data)
summary(data)
data$gender = as.factor(data$gender)
data$diagnosis = as.factor(data$diagnosis)
data$smoker = as.factor(data$smoker)
str(data)
data$smoker_fac <- ifelse(data$smoker == "Yes", 1, 0)
str(data)
write.csv(data, file = "C:/Users/a3abd/OneDrive/Desktop/AI_Omics_Internship_2025/clean_data/patient_info_clean.csv")
write.csv(data, file = "C:/Users/a3abd/OneDrive/Desktop/AI_Omics_Internship_2025/Module_I/clean_datapatient_info_clean.csv")
write.csv(data, file = "C:/Users/a3abd/OneDrive/Desktop/AI_Omics_Internship_2025/Module_I/clean_data/clean_datapatient_info_clean.csv")
write.csv(data, file = "C:/Users/a3abd/OneDrive/Desktop/AI_Omics_Internship_2025/Module_I/clean_data/patient_info_clean.csv")
# Save the entire R workspace
save.image(file = "AhmedAbdelsalam_Class_Ib_Assignment.RData")
load("C:/Users/a3abd/OneDrive/Desktop/AI_Omics_Internship_2025/Module_I/.RData")
# Save the entire R workspace
save.image(file = "AhmedAbdelsalam_Class_Ib_Assignment.RData")
classify <- function(){
if(logFC > 1 & padj < 0.05){
return("Upregulated")
}
else if(logFC < -1 & padj < 0.05){
return("Downregulated")
}
else {
return("Not_Significant")
}
}
classify <- function(){
if (is.na(logFC) | is.na(padj)) {
return(NA)
}
else if(logFC > 1 & padj < 0.05){
return("Upregulated")
}
else if(logFC < -1 & padj < 0.05){
return("Downregulated")
}
else {
return("Not_Significant")
}
}
classify <- function(){
if (is.na(logFC) | is.na(padj)) {
return(NA)
}
else if(logFC > 1 & padj < 0.05){
return("Upregulated")
}
else if(logFC < -1 & padj < 0.05){
return("Downregulated")
}
else {
return("Not_Significant")
}
}
Process <- function(){
}
classify <- function(){
if (is.na(logFC) | is.na(padj)) {
return(NA)
}
else if(logFC > 1 & padj < 0.05){
return("Upregulated")
}
else if(logFC < -1 & padj < 0.05){
return("Downregulated")
}
else {
return("Not_Significant")
}
}
classify <- function(logFC, padj){
if (is.na(logFC) | is.na(padj)) {
return(NA)
}
else if(logFC > 1 & padj < 0.05){
return("Upregulated")
}
else if(logFC < -1 & padj < 0.05){
return("Downregulated")
}
else {
return("Not_Significant")
}
}
Process <- function(file){
data <- read.csv(file) # Load CSV file
data <- na.omit(data) # Remove missing values
data$classification <- mapply(classify, data$logFC, data$padj) # Classification
output <- sub(".csv", "_processed.csv", file) # Save new processed data
write.csv(data, output, row.names = FALSE)
print(table(data$classification)) # summary
}
Process("DEGs_Data_1.csv")
Process("raw_data/DEGs_Data_1.csv")
Process("raw_data/DEGs_Data_2.csv")
classify <- function(logFC, padj){
if(logFC > 1 & padj < 0.05){
return("Upregulated")
}
else if(logFC < -1 & padj < 0.05){
return("Downregulated")
}
else {
return("Not_Significant")
}
}
Process <- function(file){
data <- read.csv(file) # Load CSV file
data <- na.omit(data) # Remove missing values
data$classification <- mapply(classify, data$logFC, data$padj) # Classification
output <- sub(".csv", "_processed.csv", file) # Save new processed data
write.csv(data, output, row.names = FALSE)
print(table(data$classification)) # summary
}
Process("raw_data/DEGs_Data_1.csv")
Process("raw_data/DEGs_Data_2.csv")
save.image(file = "AhmedAbdelsalam_Class_Ib_Assignment.RData") # Save the entire R workspace
# Creating sub-folders
dir.create("raw_data")
dir.create("clean_data")
dir.create("scripts")
dir.create("results")
#Load dataset
data <- read.csv(file.choose())
# Creating sub-folders
dir.create("raw_data")
dir.create("clean_data")
dir.create("scripts")
dir.create("results")
#Load dataset
data <- read.csv(file.choose())
# Check structure
View(data)
str(data)
summary(data)
# Identify variables with incorrect or inconsistent data types.
# - The two BMIs corresponding to patient ids 16 and 17
# - are integers not numerical, but it looks like R studio auto fixes this.
#  Convert variables to appropriate data types where needed
data$gender = as.factor(data$gender)
data$diagnosis = as.factor(data$diagnosis)
data$smoker = as.factor(data$smoker)
str(data)
# Create a new variable for smoking status as a binary factor:
# 1 for "Yes", 0 for "No"
data$smoker_fac <- ifelse(data$smoker == "Yes", 1, 0)
str(data)
# Save the cleaned dataset in your clean_data folder with the name patient_info_clean.csv
write.csv(data, file = "C:/Users/a3abd/OneDrive/Desktop/AI_Omics_Internship_2025/Module_I/clean_data/patient_info_clean.csv")
# Save your R script in your script folder with name "class_Ib"
# Save the entire R workspace
save.image(file = "AhmedAbdelsalam_Class_Ib_Assignment.RData")
classify <- function(logFC, padj){
if(logFC > 1 & padj < 0.05){
return("Upregulated")
}
else if(logFC < -1 & padj < 0.05){
return("Downregulated")
}
else {
return("Not_Significant")
}
}
Process <- function(file){
data <- read.csv(file) # Load CSV file
data <- na.omit(data) # Remove missing values
data$classification <- mapply(classify, data$logFC, data$padj) # Classification
output <- sub(".csv", "_processed.csv", file) # Save new processed data
write.csv(data, output, row.names = FALSE)
print(table(data$classification)) # summary
}
Process("raw_data/DEGs_Data_1.csv")
Process("raw_data/DEGs_Data_2.csv")
save.image(file = "AhmedAbdelsalam_Class_II_Assignment.RData") # Save the entire R workspace
classify <- function(logFC, padj){
if(logFC > 1 & padj < 0.05){
return("Upregulated")
}
else if(logFC < -1 & padj < 0.05){
return("Downregulated")
}
else {
return("Not_Significant")
}
}
Process <- function(file){
data <- read.csv(file) # Load CSV file
data <- na.omit(data) # Remove missing values
data$classification <- mapply(classify, data$logFC, data$padj) # Classification
output <- paste0("clean_data/", sub(".csv", "_processed.csv", basename(file)))
write.csv(data, output, row.names = FALSE)
print(table(data$classification)) # summary
}
Process("raw_data/DEGs_Data_1.csv")
Process("raw_data/DEGs_Data_2.csv")
save.image(file = "AhmedAbdelsalam_Class_II_Assignment.RData") # Save the entire R workspace
classify <- function(logFC, padj){
if(logFC > 1 & padj < 0.05){
return("Upregulated")
}
else if(logFC < -1 & padj < 0.05){
return("Downregulated")
}
else {
return("Not_Significant")
}
}
Process <- function(file){
data <- read.csv(file) # Load CSV file
data <- na.omit(data) # Remove missing values
data$classification <- mapply(classify, data$logFC, data$padj) # Classification
output <- paste0("clean_data/", sub(".csv", "_processed.csv", basename(file)))
write.csv(data, output, row.names = FALSE)
print(table(data$classification)) # summary
}
Process("raw_data/DEGs_Data_1.csv")
Process("raw_data/DEGs_Data_2.csv")
save.image(file = "AhmedAbdelsalam_Class_2_Assignment.RData") # Save the entire R workspace
